package repositories

import (
	"context"
	"database/sql"
	"errors"

	"{{.ModulePath}}/internal/db/{{.DbType}}/entity"
	"{{.ModulePath}}/internal/domain/models"
	"github.com/jmoiron/sqlx"
)

type {{.EntityName}}Repository struct {
	table string
	db    *sqlx.DB
}

func New{{.Entity}}Repository(db *sqlx.DB) *{{.EntityName}}Repository {
	return &{{.EntityName}}Repository{
		table: "{{.EntityTable}}",
		db:    db,
	}
}

func (r {{.EntityName}}Repository) Table() string {
	return r.table
}

func (r *{{.EntityName}}Repository) ByID(ctx context.Context, id int64) (models.{{.Entity}}, error) {
	var {{.EntityName}} entity.{{.Entity}}
	err := r.db.GetContext(ctx, &{{.EntityName}}, "SELECT * FROM "+r.table+" WHERE id = $1", id)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			err = models.ErrNotFound
		}
	}
	return {{.EntityName}}.ToModel(), err
}

func (r *{{.EntityName}}Repository) Save(ctx context.Context, {{.EntityName}} *models.{{.Entity}}) error {
	{{.EntitySymb}} := entity.ModelTo{{.Entity}}(*{{.EntityName}})
	if err := save(ctx, r.db, r.table, &{{.EntitySymb}}); err != nil {
		return err
	}
	*{{.EntityName}} = {{.EntitySymb}}.ToModel()
	return nil
}